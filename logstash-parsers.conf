filter {
    if [type] == "log" {
        mutate {
            rename => {
                message => "log"
                add_tag => [ "log_parser_skipped" ]
            }
            # Record when an entry was received at, as @timestamp field value will
            # likely be replaced below
            add_field => {
                "received_at" => "%{@timestamp}"
            }
        }
    }

    # Docker specific filter. Allows to distinguish stdout from stderr formats
    if [log_info][source] == "docker" {
        mutate {
            rename => {
                stream => "[docker][stream]"
            }
        }
    }

    if "kubernetes" in [log_info][formats] and "log_parser_success" not in [tags] {
        grok {
            pattern_definitions => {
                KUBE_LOGLEVEL => "(I|W|E)"
                KUBE_TIMESTAMP => "%{MONTHNUM2}%{MONTHDAY} %{TIME}"
            }
            match => {
                log => "^%{KUBE_LOGLEVEL:log_level}%{KUBE_TIMESTAMP:log_time}(\s+)%{GREEDYDATA:log_message}$"
            }
            add_field => {
                "[log_info][format]" => "kubernetes"
            }
            add_tag => [ "log_parser_success" ]
            remove_tag => [ "log_parser_failure", "log_parser_skipped" ]
            tag_on_failure => [ "log_parser_failure", "kubernetes" ]
        }
    }

    if "kubernetes-event" in [log_info][formats] and "kubernetes-event-logger" in [log_info][formats] and "log_parser_success" not in [tags] {
        grok {
            match => { "log" => "^[^{]*%{DATA:event_json}[^}]*$" }
            tag_on_failure => [ "log_parser_failure", "kubernetes_event_parser_error" ]
        }

        json {
            source => "event_json"
            target => "parsed_json"
            add_field => {
              "kubernetes_event" => "%{[parsed_json][object]}"
            }
            remove_field => ["event_json", "parsed_json"]
            tag_on_failure => [ "log_parser_failure", "json_event_parser_failure", "kubernetes_event_parser_error" ]
        }

        json {
            source => "kubernetes_event"
            target => "kubernetes_event"
            add_field => {
              "event_timestamp" => "%{[kubernetes_event][lastTimestamp]}"
            }
            add_tag => [ "log_parser_success" ]
            tag_on_failure => [ "log_parser_failure", "json_event_parser_failure", "kubernetes_event_parser_error" ]
        }

        date {
            match => [ "event_timestamp", "ISO8601" ]
            target => "@timestamp"
            remove_field => ["event_timestamp"]
            tag_on_failure => [ "date_parser_failure", "kubernetes_event_parser_error" ]
        }
    }

    if "kubernetes-event" in [log_info][formats] and "heapster-eventer" in [log_info][formats] and "log_parser_success" not in [tags] {

        grok {
            pattern_definitions => {
                EVENT_DATE => "%{YEAR}-%{MONTHNUM}-%{MONTHDAY}\s%{HOUR}:?%{MINUTE}:?%{SECOND}\s[+-][0-9]{1,4}\s%{TZ}"
            }
            match => {
                log => "^%{DATA}%{EVENT_DATE:log_timestamp_raw}%{GREEDYDATA:log_message}$"
            }
            add_tag => [ "log_parser_success" ]
            remove_tag => [ "log_parser_failure", "log_parser_skipped" ]
            tag_on_failure => [ "log_parser_failure", "heapster_eventer_error" ]
        }

        date {
            match => [ "log_timestamp_raw", "YYYY-MM-dd HH:mm:ss Z z" ]
            target => "@timestamp"
            remove_field => [ "log_timestamp_raw" ]
            tag_on_failure => [ "date_parser_failure" ]
        }

    }

    # Append the namespace (if available) that the event came from to index_prefix
    # Give precedence to the involvedObject.namespace since metadata.namespace
    # may sometimes just give a vague 'kube-system' namespace that may be unhelpful
    # when kube events from multiple kube clusters are feeding into same ELK stack
    if [@metadata][index_prefix] {

        if [kubernetes_event][involvedObject][namespace] and [kubernetes_event][involvedObject][namespace] != "" {
            mutate {
                replace => {
                    "[@metadata][index_prefix]" => "%{[@metadata][index_prefix]}-%{[kubernetes_event][involvedObject][namespace]}"
                }
            }
        } else if [kubernetes_event][metadata][namespace] and [kubernetes_event][metadata][namespace] != "" {
            mutate {
                replace => {
                    "[@metadata][index_prefix]" => "%{[@metadata][index_prefix]}-%{[kubernetes_event][metadata][namespace]}"
                }
            }
        }

    }

    # Give precedence to docker timestamp since it is most consistent across containers.
    # But if Kubernetes Events, we don't care about Docker time, we care about the time Kubernetes
    # recorded the event
    if [log_info][source] == "docker" and "kubernetes-event" not in [log_info][formats] {
        date {
            match => [ "time", "ISO8601" ]
            remove_field => [ "time" ]
            tag_on_failure => [ "date_timestamp_failure" ]
        }
    }

    # Parse source file path and extract kubernetes specific information.
    if [log_info][origin] == "kubernetes" {
        grok {
            pattern_definitions => {
                KUBE_NAME => "[a-z]([a-zA-Z0-9-])*"
                KUBE_ID => "[0-91-f]+"
            }
            match => {
                "source" => "^/(.+/)?+%{KUBE_NAME:[kube][pod]}_%{KUBE_NAME:[kube][namespace]}_%{KUBE_NAME:[docker][container]}-%{KUBE_ID:[docker][container_id]}.log$"
            }
            tag_on_failure => [ "log_parser_failure", "source_field" ]
        }
    }
}
